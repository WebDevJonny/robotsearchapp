{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filterRobots","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"8OAgBeA,EAdF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAEzB,OAEI,cADA,CACA,OAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACI,6BAAKF,IACL,4BAAIC,WCgBLK,EAtBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAGhB,OAEI,aADA,CACA,gBAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CAEAR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCCdC,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,aADK,CACL,OAAKV,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,eACZC,SAAUH,OCEXI,G,MARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,aC+CJC,E,kDAtCX,aAAe,IAAD,8BACV,gBAcJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAd1C,EAAKC,MAAQ,CACTxB,OAAQ,GACRqB,YAAa,IAJP,E,gEAOO,IAAD,OAEhBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAW,EAAKT,SAAS,CAACpB,OAAQ6B,S,+BAOtC,IAAD,EAC2BC,KAAKN,MAA7BxB,EADH,EACGA,OAAQqB,EADX,EACWA,YACVU,EAAe/B,EAAOgC,QAAO,SAAAC,GAC/B,OAAOA,EAAMxC,KAAKyC,cAAcC,SAASd,EAAYa,kBAIzD,OAAQlC,EAAOoC,OAGP,sBAAKxC,UAAU,KAAf,UACI,8CACA,cAAC,EAAD,CAAWU,aAAcwB,KAAKZ,iBAC9B,cAAC,EAAD,UACA,cAAC,EAAD,CAAUlB,OAAQ+B,SAN1B,6C,GA3BMM,aCFHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCEdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDX,M","file":"static/js/main.796cb645.chunk.js","sourcesContent":["import React from 'react'; //must be in scope when using JSX\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    //destructering \r\n    return (\r\n        //This is JSX not HTML\r\n        <div className='tc bg-light-green dib br3 ps3 ma2 grow bw2 shadow-5'>  \r\n            <img alt='Robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../components/Card';\r\n\r\n//destructoring and passing in robots since it receives it on the index file\r\nconst CardList = ({ robots }) => {\r\n    //robots loop - each robot gets a user and then returns a card component. We can use i since its the second parameter\r\n    //adding a key since react won't know which card is which\r\n    return (\r\n        //we want to do a loop over the robots and create a card component for each one\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card \r\n                        key={i} \r\n                        id={robots[i].id} \r\n                        name={robots[i].name} \r\n                        email={robots[i].email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n    return ( //when you have more than one item, wrap in a div and use ()\r\n        <div className='pa2'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='Robot Search'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflow: 'scroll', border: '5px solid black', height: '500px' }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, { Component }from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/Searchbox';\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll';\r\n\r\n\r\n//State means the description of your app. It's an object that describes the application. \r\n//State is the robots and whatever is entered in the search box.\r\n//Props are things that come out of state\r\n//Parent feeds state into a child component and then the child becomes a property after being received\r\n\r\n//To use state\r\n//SMART Components because it has STATE - tend to have this class syntax\r\nclass App extends Component {\r\n    constructor() { //add a constructor before declaring the state then make sure to add super()\r\n        super() //calls the constructor from component\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        //using Fetch to grab API\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response=> response.json())\r\n            .then(users =>  {this.setState({robots: users})});        \r\n        }\r\n    //anytime you make your own method on a component\r\n    //make sure to use the arrows since render and constructor are prebuilt with react\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value }) \r\n        }\r\n    render() {\r\n        const { robots, searchfield } = this.state;\r\n        const filterRobots = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        })\r\n        //if it took longer than 5 seconds bc of all the users\r\n        //loading bar\r\n        return !robots.length ?  //robots.length is equal to zero if this is zero then say the opposite\r\n            <h1>Loading</h1> :\r\n            (\r\n                <div className='tc'>\r\n                    <h1>RobotFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                    <CardList robots={filterRobots}/>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n       }\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom'; //React is a Vue library - DOM websites\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons'; //allows us to have similar to bootstrap - predefined class names that can be added to components to look nice\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}